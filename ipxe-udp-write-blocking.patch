# HG changeset patch
# Parent 87ae1787a5331a2cdee34c48208fa5762eb2bc76

diff -r 87ae1787a533 tools/firmware/etherboot/ipxe-v1.0.0/src/arch/i386/interface/pxe/pxe_udp.c
--- a/tools/firmware/etherboot/ipxe-v1.0.0/src/arch/i386/interface/pxe/pxe_udp.c	Wed Feb 29 09:00:29 2012 +0000
+++ b/tools/firmware/etherboot/ipxe-v1.0.0/src/arch/i386/interface/pxe/pxe_udp.c	Wed Feb 29 17:11:09 2012 +0000
@@ -10,6 +10,7 @@
 #include <gpxe/udp.h>
 #include <gpxe/uaccess.h>
 #include <gpxe/process.h>
+#include <gpxe/retry.h>
 #include <pxe.h>
 
 /*
@@ -40,6 +41,10 @@ struct pxe_udp_connection {
 	struct sockaddr_in local;
 	/** Current PXENV_UDP_READ parameter block */
 	struct s_PXENV_UDP_READ *pxenv_udp_read;
+	/** Current PXENV_UDP_WRITE parameter block */
+	struct s_PXENV_UDP_WRITE *pxenv_udp_write;
+	/** return from write */
+	int rc;
 };
 
 /**
@@ -215,6 +220,66 @@ PXENV_EXIT_t pxenv_udp_close ( struct s_
 
 extern int running_pvs_nbp;
 
+static void udp_write_expired ( struct retry_timer *timer, int over )
+{
+	struct sockaddr_in dest;
+	struct xfer_metadata meta = {
+		.src = ( struct sockaddr * ) &pxe_udp.local,
+		.dest = ( struct sockaddr * ) &dest,
+		.netdev = pxe_netdev,
+	};
+	int rc;
+	struct s_PXENV_UDP_WRITE *pxenv_udp_write = pxe_udp.pxenv_udp_write;
+	size_t len;
+	struct io_buffer *iobuf;
+	userptr_t buffer;
+
+	DBG ( "UDP timer over %d\n", over);
+
+	if ( over || !pxenv_udp_write ) {
+		/* this generate a generic failure */
+		pxe_udp.rc = -ETIME;
+		return;
+	}
+
+	/* Construct destination socket address */
+	memset ( &dest, 0, sizeof ( dest ) );
+	dest.sin_family = AF_INET;
+	dest.sin_addr.s_addr = pxenv_udp_write->ip;
+	dest.sin_port = pxenv_udp_write->dst_port;
+
+	/* FIXME: we ignore the gateway specified, since we're
+	 * confident of being able to do our own routing.  We should
+	 * probably allow for multiple gateways.
+	 */
+
+	/* Allocate and fill data buffer */
+	len = pxenv_udp_write->buffer_size;
+	iobuf = xfer_alloc_iob ( &pxe_udp.xfer, len );
+	if ( ! iobuf ) {
+		pxe_udp.rc = -ENOMEM;
+		return;
+	}
+	buffer = real_to_user ( pxenv_udp_write->buffer.segment,
+				pxenv_udp_write->buffer.offset );
+	copy_from_user ( iob_put ( iobuf, len ), buffer, 0, len );
+
+	DBG ( " %04x:%04x+%x %d->%s:%d", pxenv_udp_write->buffer.segment,
+	      pxenv_udp_write->buffer.offset, pxenv_udp_write->buffer_size,
+	      ntohs ( pxenv_udp_write->src_port ),
+	      inet_ntoa ( dest.sin_addr ),
+	      ntohs ( pxenv_udp_write->dst_port ) );
+	
+	/* Otherwise, retransmit the packet */
+	rc = xfer_deliver_iob_meta ( &pxe_udp.xfer, iobuf, &meta );
+	if ( PXENV_STATUS(rc) == PXENV_STATUS_TFTP_FILE_NOT_FOUND ) {
+		start_timer ( timer );
+		return;
+	}
+
+	pxe_udp.rc = rc;
+}
+
 /**
  * UDP WRITE
  *
@@ -257,25 +322,11 @@ extern int running_pvs_nbp;
  *
  */
 PXENV_EXIT_t pxenv_udp_write ( struct s_PXENV_UDP_WRITE *pxenv_udp_write ) {
-	struct sockaddr_in dest;
-	struct xfer_metadata meta = {
-		.src = ( struct sockaddr * ) &pxe_udp.local,
-		.dest = ( struct sockaddr * ) &dest,
-		.netdev = pxe_netdev,
-	};
-	size_t len;
-	struct io_buffer *iobuf;
-	userptr_t buffer;
 	int rc;
+	struct retry_timer timer;
 
 	DBG ( "PXENV_UDP_WRITE" );
 
-	/* Construct destination socket address */
-	memset ( &dest, 0, sizeof ( dest ) );
-	dest.sin_family = AF_INET;
-	dest.sin_addr.s_addr = pxenv_udp_write->ip;
-	dest.sin_port = pxenv_udp_write->dst_port;
-
 	/* Detect PVS */
 	if ( running_pvs_nbp == -1 ) {
 		if (pxenv_udp_write->src_port == htons ( 6901 ) ) {
@@ -294,31 +345,20 @@ PXENV_EXIT_t pxenv_udp_write ( struct s_
 	if ( ! pxe_udp.local.sin_port )
 		pxe_udp.local.sin_port = htons ( 2069 );
 
-	/* FIXME: we ignore the gateway specified, since we're
-	 * confident of being able to do our own routing.  We should
-	 * probably allow for multiple gateways.
-	 */
+	memset(&timer, 0, sizeof(timer));
+	timer.expired = udp_write_expired;
+	pxe_udp.rc = -EINPROGRESS;
+	pxe_udp.pxenv_udp_write = pxenv_udp_write;
 
-	/* Allocate and fill data buffer */
-	len = pxenv_udp_write->buffer_size;
-	iobuf = xfer_alloc_iob ( &pxe_udp.xfer, len );
-	if ( ! iobuf ) {
-		pxenv_udp_write->Status = PXENV_STATUS_OUT_OF_RESOURCES;
-		return PXENV_EXIT_FAILURE;
-	}
-	buffer = real_to_user ( pxenv_udp_write->buffer.segment,
-				pxenv_udp_write->buffer.offset );
-	copy_from_user ( iob_put ( iobuf, len ), buffer, 0, len );
+	/* Transmit packet */
+	start_timer_nodelay ( &timer );
 
-	DBG ( " %04x:%04x+%x %d->%s:%d", pxenv_udp_write->buffer.segment,
-	      pxenv_udp_write->buffer.offset, pxenv_udp_write->buffer_size,
-	      ntohs ( pxenv_udp_write->src_port ),
-	      inet_ntoa ( dest.sin_addr ),
-	      ntohs ( pxenv_udp_write->dst_port ) );
-	
-	/* Transmit packet */
-	if ( ( rc = xfer_deliver_iob_meta ( &pxe_udp.xfer, iobuf,
-					    &meta ) ) != 0 ) {
+	while ( ( rc = pxe_udp.rc ) == -EINPROGRESS )
+		step();
+
+	pxe_udp.pxenv_udp_write = NULL;
+
+	if ( rc != 0) {
 		pxenv_udp_write->Status = PXENV_STATUS ( rc );
 		return PXENV_EXIT_FAILURE;
 	}
