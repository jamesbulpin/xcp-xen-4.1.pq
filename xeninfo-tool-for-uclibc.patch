Add a simple C program to tools/misc that we can use from the installer to get
the total amount of host memory, and determine whether VT is supported and
enabled.

diff -r 3d2191d6a0fe .hgignore
--- a/.hgignore
+++ b/.hgignore
@@ -204,6 +204,7 @@
 ^tools/misc/xen-hptool$
 ^tools/misc/xen-hvmcrash$
 ^tools/misc/xen-tmem-list-parse$
+^tools/misc/xeninfo$
 ^tools/misc/xenperf$
 ^tools/misc/xenpm$
 ^tools/misc/xen-hvmctx$
diff -r 3d2191d6a0fe mk/Makefile.uclibc
--- a/mk/Makefile.uclibc
+++ b/mk/Makefile.uclibc
@@ -20,6 +20,7 @@ LIBXC_INSTALL_STAMP  := $(MY_OBJ_DIR)/.l
 LIBXC_INSTALL_DIR    := $(MY_OBJ_DIR)/libxc.install
 
 XENSTORE_BUILD_STAMP := $(MY_OBJ_DIR)/.xenstore_build_stamp
+XENINFO_BUILD_STAMP  := $(MY_OBJ_DIR)/.xeninfo_build_stamp
 
 BINARY_INSTALL_STAMP := $(MY_OBJ_DIR)/.binary_install_stamp
 BINARY_INSTALL_DIR   := $(MY_OBJ_DIR)/bin.install
@@ -44,7 +45,7 @@ build: $(LIBXC_PKG) $(BINARY_PKG) $(INST
 clean:
 	rm -f $(SOURCE_STAMP)
 	rm -f $(LIBXC_BUILD_STAMP) $(LIBXC_INSTALL_STAMP)
-	rm -f $(XENSTORE_BUILD_STAMP)
+	rm -f $(XENSTORE_BUILD_STAMP) $(XENINFO_BUILD_STAMP)
 	rm -f $(BINARY_INSTALL_STAMP)
 	rm -f $(INSTALLER_FILES_STAMP)
 	rm -rf $(REPO)
@@ -78,12 +79,17 @@ clean:
 $(LIBXC_PKG): $(LIBXC_INSTALL_STAMP)
 	tar --create --bzip2 --file $@ --directory $(LIBXC_INSTALL_DIR) .
 
+$(XENINFO_BUILD_STAMP): $(LIBXC_BUILD_STAMP)
+	$(CROSS_MAKE) -C $(SOURCE_DIR)/tools/misc LDFLAGS=-static xeninfo
+	touch $@
+
 $(XENSTORE_BUILD_STAMP): $(LIBXC_BUILD_STAMP)
 	$(CROSS_MAKE) -C $(SOURCE_DIR)/tools/xenstore XENSTORE_STATIC_CLIENTS=y clients
 	touch $@
 
-$(BINARY_INSTALL_STAMP): $(XENSTORE_BUILD_STAMP)
+$(BINARY_INSTALL_STAMP): $(XENINFO_BUILD_STAMP) $(XENSTORE_BUILD_STAMP)
 	mkdir -p $(BINARY_INSTALL_DIR)/usr/bin
+	$(STRIP) -o $(BINARY_INSTALL_DIR)/usr/bin/xeninfo $(SOURCE_DIR)/tools/misc/xeninfo
 	$(CROSS_MAKE) -C $(SOURCE_DIR)/tools/xenstore XENSTORE_STATIC_CLIENTS=y DESTDIR=$(BINARY_INSTALL_DIR) client-install
 	$(STRIP) $(BINARY_INSTALL_DIR)/usr/bin/xenstore
 	touch $@
@@ -93,4 +99,5 @@ clean:
 
 $(INSTALLER_FILES_STAMP): $(BINARY_INSTALL_STAMP)
 	mkdir -p $(MY_INSTALLER_FILES)/usr/bin
+	cp $(BINARY_INSTALL_DIR)/usr/bin/xeninfo $(MY_INSTALLER_FILES)/usr/bin/xeninfo
 	touch $@
diff -r 3d2191d6a0fe mk/xen-4.1.spec.in
--- a/mk/xen-4.1.spec.in
+++ b/mk/xen-4.1.spec.in
@@ -130,6 +130,7 @@ rm -rf $RPM_BUILD_ROOT
 %{_bindir}/lomount
 %{_bindir}/pygrub
 %{_bindir}/xencons
+%{_bindir}/xeninfo
 %{_bindir}/xenstore
 %{_bindir}/xenstore-*
 %{_bindir}/xentrace*
diff -r 3d2191d6a0fe tools/misc/Makefile
--- a/tools/misc/Makefile
+++ b/tools/misc/Makefile
@@ -11,6 +11,7 @@ CFLAGS   += $(INCLUDES)
 HDRS     = $(wildcard *.h)
 
 TARGETS-y := xenperf xenpm xen-tmem-list-parse gtraceview gtracestat xenlockprof xenwatchdogd
+TARGETS-y += xeninfo
 TARGETS-$(CONFIG_X86) += xen-detect xen-hvmctx xen-hvmcrash
 TARGETS-$(CONFIG_MIGRATE) += xen-hptool
 TARGETS := $(TARGETS-y)
@@ -19,7 +20,7 @@ SUBDIRS-$(CONFIG_LOMOUNT) += lomount
 SUBDIRS-$(CONFIG_MINITERM) += miniterm
 SUBDIRS := $(SUBDIRS-y)
 
-INSTALL_BIN-y := xencons
+INSTALL_BIN-y := xencons xeninfo
 INSTALL_BIN-$(CONFIG_X86) += xen-detect
 INSTALL_BIN := $(INSTALL_BIN-y)
 
@@ -57,4 +58,7 @@ xen-hvmctx xen-hvmcrash xenperf xenpm gt
 gtraceview: %: %.o Makefile
 	$(CC) $(CFLAGS) -o $@ $< $(LDFLAGS) $(CURSES_LIBS)
 
+xeninfo: %: %.o Makefile
+	$(CC) $(LDFLAGS) -o $@ $< -L$(XEN_LIBXC) -lxenctrl
+
 -include $(DEPS)
diff -r 3d2191d6a0fe tools/misc/xeninfo.c
--- /dev/null
+++ b/tools/misc/xeninfo.c
@@ -0,0 +1,127 @@
+/**
+ * Simple command-line tool to make simple hypercalls to retrieve config/host
+ * information when the full toolstack is not available.
+ *
+ * Usage: xeninfo <host-total-mem | xen-caps>
+ *
+ * Based on code by James Bulpin <james@xensource.com>.
+ * Modifications and additions by Andrew Peace <andrew@xensource.com>.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include <inttypes.h>
+#include "xenctrl.h"
+
+enum mode {
+    MODE_PRINT_CAPS,
+    MODE_PRINT_HOST_TOTAL_MEMORY,
+    MODE_PRINT_COMMANDLINE,
+};
+
+int print_caps(xc_interface *xc)
+{
+    int ret;
+    xen_capabilities_info_t xen_caps;
+
+    ret = xc_version(xc, XENVER_capabilities, &xen_caps);
+    if (ret == 0) {
+        printf("%s\n", xen_caps);
+    }
+
+    return ret;
+}
+
+int print_host_total_memory(xc_interface *xc) {
+    int ret;
+    xc_physinfo_t info;
+
+    memset(&info, 0, sizeof (info));
+    ret = xc_physinfo(xc, &info);
+    if (ret == 0) {
+	printf("%"PRId64"\n", info.total_pages * XC_PAGE_SIZE / 1024);
+    }
+
+    return ret;
+}
+
+int print_commandline(xc_interface *xc) {
+    int ret;
+    xen_commandline_t xen_commandline;
+
+    ret = xc_version(xc, XENVER_commandline, &xen_commandline);
+    if (ret == 0) {
+        printf("%s\n", xen_commandline);
+    }
+
+    return ret;
+
+}
+
+int main(int argc, char **argv)
+{
+    xc_interface *xc;
+    int ret = 0;
+    enum mode mode;
+
+    if (argc < 2) {
+        fprintf(stderr, "Incorrect number of arguments.\n"
+                         "Specify either 'host-total-mem', 'xen-caps' or 'xen-commandline'.\n");
+        return 1;
+    }
+
+    if (strcmp(argv[1], "host-total-mem") == 0) {
+        mode = MODE_PRINT_HOST_TOTAL_MEMORY;
+    } else if (strcmp(argv[1], "xen-caps") == 0) {
+        mode = MODE_PRINT_CAPS;
+    } else if (strcmp(argv[1], "xen-commandline") == 0) {
+        mode = MODE_PRINT_COMMANDLINE;
+    } else {
+        fprintf(stderr, "Unkown argument.\n"
+                        "Specify either 'host-total-mem', 'xen-caps' or 'xen-commandline'.\n");
+	return 1;
+    }
+
+    xc = xc_interface_open(0,0,0);
+    if (NULL == xc) {
+        fprintf(stderr, "Unable to open libxc.\n");
+        ret = 1;
+    } else {
+        switch (mode) {
+        case MODE_PRINT_CAPS:
+            if (print_caps(xc) != 0) {
+                perror("Unable to read xen_caps.\n");
+                ret = 1;
+            }
+            break;
+
+	case MODE_PRINT_HOST_TOTAL_MEMORY:
+	    if (print_host_total_memory(xc) != 0) {
+		perror("Unable to read physinfo.\n");
+		ret = 1;
+	    }
+	    break;
+
+	case MODE_PRINT_COMMANDLINE:
+	    if (print_commandline(xc) != 0) {
+		perror("Unable to read xen_commandline.\n");
+		ret = 1;
+	    }
+	    break;
+        }
+
+        xc_interface_close(xc);
+    }
+
+    return ret;
+}
