Extra memory access restrictions for CC evaluations.

1  "A mechanism must be provided for configuring the hypervisor to
disallow shared memory channels between domUs. If the hypervisor is put
into 'disable shared channels mode' and a hypercall is made that would
result in a shared memory channel being set up between domUs then this
call should fail with a defined error code."

2  "A mechanism must be provided for configuring the hypervisor to
disallow domUs from voluntarily returning pages to the hypervisor. If
this hypervisor is put into 'disable voluntarily returned pages' mode
and a hypercall is made by which a guest voluntarily attempting to
return pages, then this call should fail with a defined error code."

Actually enabling these restrictions breaks many things (some PV
kernels, any balloon drivers, v2v channels. etc) but should be OK for
the particular configuration under test.

diff -r ec8084e2e6ad xen/arch/x86/mm.c
--- a/xen/arch/x86/mm.c	Tue Jul 24 16:25:36 2012 +0100
+++ b/xen/arch/x86/mm.c	Tue Jul 24 16:49:31 2012 +0100
@@ -4649,6 +4649,15 @@ long arch_memory_op(int op, XEN_GUEST_HA
         prev_mfn = gmfn_to_mfn(d, xatp.gpfn);
         if ( mfn_valid(prev_mfn) )
         {
+            if ( opt_cc_restrictions )
+            {
+                /* CC-restricted guests can't use XATP+aliasing to
+                 * sneakily free domain memory */
+                domain_unlock(d);
+                rcu_unlock_domain(d);
+                return -EPERM;
+            }
+
             if ( is_xen_heap_mfn(prev_mfn) )
                 /* Xen heap frames are simply unhooked from this phys slot. */
                 guest_physmap_remove_page(d, xatp.gpfn, prev_mfn, 0);
diff -r ec8084e2e6ad xen/arch/x86/setup.c
--- a/xen/arch/x86/setup.c	Tue Jul 24 16:25:36 2012 +0100
+++ b/xen/arch/x86/setup.c	Tue Jul 24 16:49:31 2012 +0100
@@ -84,6 +84,10 @@ boolean_param("noapic", skip_ioapic_setu
 s8 __read_mostly xen_cpuidle = -1;
 boolean_param("cpuidle", xen_cpuidle);
 
+/* CC evaluation more with extra restrictions on guest activity */
+bool_t opt_cc_restrictions = 0;
+boolean_param("cc-restrictions", opt_cc_restrictions);
+
 cpumask_t __read_mostly cpu_present_map;
 
 unsigned long __read_mostly xen_phys_start;
@@ -1330,6 +1334,9 @@ void __init __start_xen(unsigned long mb
     if ( xen_cpuidle )
         xen_processor_pmbits |= XEN_PROCESSOR_PM_CX;
 
+    if ( opt_cc_restrictions )
+        printk("CC restrictions are in force\n");
+
     /*
      * We're going to setup domain0 using the module(s) that we stashed safely
      * above our heap. The second module, if present, is an initrd ramdisk.
diff -r ec8084e2e6ad xen/common/compat/grant_table.c
--- a/xen/common/compat/grant_table.c	Tue Jul 24 16:25:36 2012 +0100
+++ b/xen/common/compat/grant_table.c	Tue Jul 24 16:49:31 2012 +0100
@@ -59,6 +59,14 @@ int compat_grant_table_op(unsigned int c
     unsigned int i;
     XEN_GUEST_HANDLE(void) cnt_uop;
 
+    /* In CC restricted mode, unprivileged guests can't use the grant
+     * table mechanism to access other guests' memory */
+    if ( unlikely(opt_cc_restrictions) &&
+         !IS_PRIV(current->domain) &&
+         cmd != GNTTABOP_query_size &&
+         cmd != GNTTABOP_setup_table )
+        return -EPERM;
+
     set_xen_guest_handle(cnt_uop, NULL);
     switch ( cmd )
     {
diff -r ec8084e2e6ad xen/common/grant_table.c
--- a/xen/common/grant_table.c	Tue Jul 24 16:25:36 2012 +0100
+++ b/xen/common/grant_table.c	Tue Jul 24 16:49:31 2012 +0100
@@ -2337,6 +2337,14 @@ do_grant_table_op(
     if ( (int)count < 0 )
         return -EINVAL;
     
+    /* In CC restricted mode, unprivileged guests can't use the grant
+     * table mechanism to access other guests' memory */
+    if ( unlikely(opt_cc_restrictions) &&
+         !IS_PRIV(current->domain) &&
+         cmd != GNTTABOP_query_size &&
+         cmd != GNTTABOP_setup_table )
+        return -EPERM;
+
     domain_lock(d);
     
     rc = -EFAULT;
diff -r ec8084e2e6ad xen/common/memory.c
--- a/xen/common/memory.c	Tue Jul 24 16:25:36 2012 +0100
+++ b/xen/common/memory.c	Tue Jul 24 16:49:31 2012 +0100
@@ -515,6 +515,13 @@ long do_memory_op(unsigned long cmd, XEN
 
     op = cmd & MEMOP_CMD_MASK;
 
+    /* In CC restricted mode, unprivileged guests can't voluntarily
+     * return memory to Xen. */
+    if ( unlikely(opt_cc_restrictions) &&
+         !IS_PRIV(current->domain) &&
+         (op == XENMEM_decrease_reservation || op == XENMEM_exchange) )
+        return -EPERM;
+
     switch ( op )
     {
     case XENMEM_increase_reservation:
diff -r ec8084e2e6ad xen/include/xen/mm.h
--- a/xen/include/xen/mm.h	Tue Jul 24 16:25:36 2012 +0100
+++ b/xen/include/xen/mm.h	Tue Jul 24 16:49:31 2012 +0100
@@ -327,4 +327,8 @@ int guest_remove_page(struct domain *d, 
 /* TRUE if the whole page at @mfn is of the requested RAM type(s) above. */
 int page_is_ram_type(unsigned long mfn, unsigned long mem_type);
 
+/* CC evaluation mode.  If set, unprivileged guests can't relinquish
+ * memory, or use grant tables to access other guests' memory. */
+extern bool_t opt_cc_restrictions;
+
 #endif /* __XEN_MM_H__ */
